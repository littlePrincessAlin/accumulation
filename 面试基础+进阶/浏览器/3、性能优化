1、图片优化
（1）计算图片大小
减少像素点
减少每个像素点能够显示的颜色
（2）图片加载优化
将多个图标文件整合到一张图片中（雪碧图）
小图使用 base64 格式
一般图片都用 CDN 加载
2、DNS 预解析 dns-prefetch
预先获得域名所对应的 IP： 
<link rel="dns-prefetch" href="//blog.poetries.top">
3、节流/防抖
举例：滚动事件中会发起网络请求，但是我们并不希望用户在滚动过程中一直发起请求，而是隔一段时间发起一次/
有一个按钮点击会触发网络请求，但是我们并不希望每次点击都发起网络请求，而是当用户点击按钮一段时间后没有再次点击的情况才去发起网络请求
4、预加载 preload
有些资源不需要马上用到，但是需要尽早获得。预加载就是声明式的fetch强制浏览器请求资源，并不会阻塞onload事件。
好处：可以一定程度上降低首屏的加载时间。 缺点：兼容性不好
<link rel="preload" href="http://blog.poetries.top">
5、预渲染 prerender
<link rel="prerender" href="http://blog.poetries.top">
预渲染虽然可以提高页面的加载速度，但是要确保该页面大概率会被用户在之后打开，否则就是白白浪费资源去渲染。
6、懒执行
将某些逻辑延迟到使用时再计算，用于首屏优化。
7、懒加载
*不关键的资源延后加载。
*对于图片来说，先设置图片标签的 src 属性为一张占位图，将真实的图片资源放入一个自定义属性中，当进入自定义区域时，就将自定义属性替换为 src 属性，这样图片就会去下载资源，实现了图片懒加载。
8、CDN
将静态资源尽量使用CDN加载，由于浏览器对于单个域名有并发请求上限，可以使用多个 CDN 域名。（CDN 域名要与主站不同）
CDN的原理是尽可能的在各个地方分布机房缓存数据，这样即使我们的根服务器远在国外，在国内的用户也可以通过国内的机房迅速加载资源。
9、缓存
10、使用http2.0
11、根据chrome的timing优化
12、移动端优化