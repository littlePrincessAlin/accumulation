1、渲染过程
（1）浏览器接收到 HTML 文件并转换为 DOM 树
在解析 HTML 文件的时候，浏览器还会遇到 CSS 和 JS 文件，这时候浏览器也会去下载并解析这些文件
（2） 将 CSS 文件转换为 CSSOM 树
（3）生成渲染树
当我们生成 DOM 树和 CSSOM 树以后，就需要将这两棵树组合为渲染树
（4）渲染树的每个元素包含的内容都是计算过的，它被称之为布局（layout）。浏览器使用一种流式处理的方法，只需要一次绘制操作就可以布局所有的元素
（5）将渲染树的各个节点绘制到屏幕上，这一步被称为绘制（painting）

2、为什么操作dom慢
原因：因为js是是 JS 引擎中的东西，dom是属于渲染引擎中的东西。当我们通过js操作dom时，涉及到了两个线程之间的通信，会损耗性能；其次dom操作会导致重绘回流的情况。
（1）插入几万个 DOM，如何实现页面不卡顿？
requestAnimationFrame：循环插入DOM
virtualized scroller：虚拟滚动。只渲染可视区域内的内容，非可见区域的那就完全不渲染了，当用户在滚动的时候就实时去替换渲染的内容

3、什么情况下阻塞渲染
（1）渲染的前提是生成渲染树，所以html和css一定会阻塞渲染。所以你应该降低一开始需要渲染的文件大小，并且扁平层级，优化选择器。
（2）当浏览器在解析到 script 标签时，会暂停构建 DOM，完成后才会从暂停的地方重新开始。也就是说，如果你想首屏渲染的越快，就越不应该在首屏就加载 JS文件，这也是都建议将 script 标签放在 body 标签底部的原因。但是也不是说script 标签必须放在底部，你应该适当的加defer和async属性
（3）defer：js会并行下载，但是会放到html完全解析完之后执行；async：js会并行下载，但是在下载完成之后立即执行。
