1、遇到的问题：怎样处理 移动端 1px 被 渲染成 2px问题
两种方法
  （1）局部处理
meta标签中的 viewport属性 ，initial-scale 设置为 1
rem按照设计稿标准走，外加利用transfrome 的scale(0.5) 缩小一倍即可；
  （2）全局处理
mate标签中的 viewport属性 ，initial-scale 设置为 0.5
rem 按照设计稿标准走即可

2、常见的移动端兼容性问题
   （1）移动端适配
（1-1）为啥要适配？
* 为了适配各种移动端设备，呈现较完美的布局；
* 各个移动端设备分辨率不太一样，网页想铺满整个屏幕并在各个分辨率下进行等比缩放；
（1-2）适配方案？
* 百分比
* 改变缩放比例
* rem  这里可能会问你rem和em有啥区别：rem是依据根节点的fontsize，em是根据父元素的fontsize
* 像素比
（1-3）rem适配用这段代码动态计算html的font-size大小
function changeRem() {
    var width = window.document.documentElement.getBoundingClientRect().width; // 获取html的宽度
    if (width > 750) { // 750是设计稿大小
        width = 750;
    }
    var fontS = width / 10; // 把设备宽度十等分 1rem=10px
    docEl.style.fontSize = fontS + "px";
}

   （2）移动端300ms延迟
* 300ms的延迟咋来的？
主要是双击缩放，手指快速的点击两次。当用户点击一次屏幕之后，不会去判断用户确定打开这个地址，而是等待300ms用来判断用户是否再次点击了屏幕。
* 怎么解决？
用两种办法：
 禁用缩放，设置meta标签 user-scalable=no
 fastclick.js
 FastClick的实现原理是在检查到touchend事件的时候，会通过dom自定义事件立即发出click事件，并把浏览器在300ms之后真正的click事件阻止掉。fastclick.js还可以解决穿透问题
   （3）点击穿透
* 阻止默认事件e.preventDefault()
* setTimeout 延迟执行

   （4）如何解决移动端 Retina 屏 1px 像素问题
* 伪元素+scale 
.box::after{
    content: '';
    position: absolute;
    bottom: 0;
    width: 100%;
    height: 1px;
    transform: scaleY(0.5);
    transform-origin: 0 0; 
    background: red;
}
*border-image
div{
    border-width: 1px 0px;
    border-image: url(border.png) 2 0 stretch;
}
