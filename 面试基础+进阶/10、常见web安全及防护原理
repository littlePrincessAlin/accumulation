1、什么是 XSS 攻击？如何防范 XSS 攻击？
简单说：攻击者想尽一切办法将可以执行的代码注入到网页中。
一般的XSS攻击分为两种：
  （1）攻击的代码被服务端写入数据库，这种危害会比较大，导致大量正常访问页面的用户都受到攻击。
  （2）通过修改url参数的方式加入攻击代码，诱导用户访问链接从而进行攻击。
防御：
  （1）转义字符
对于用户的输入应该是永远不信任的。转义输入输出的内容。
function escape(str) {
  str = str.replace(/&/g, '&amp;')
  str = str.replace(/</g, '&lt;')
  str = str.replace(/>/g, '&gt;')
  str = str.replace(/"/g, '&quto;')
  str = str.replace(/'/g, '&#39;')
  str = str.replace(/`/g, '&#96;')
  str = str.replace(/\//g, '&#x2F;')
  return str
}
但是对于富文本，又不能这么使用，会把需要的格式也过滤掉，所以可以使用白名单的方式：
const xss = require('xss')
let html = xss('<h1 id="title">XSS Demo</h1><script>alert("xss");</script>')
// -> <h1>XSS Demo</h1>&lt;script&gt;alert("xss");&lt;/script&gt;
console.log(html)
保留了 h1 标签且过滤了 script标签


2、什么是 CSRF 攻击？如何防范 CSRF 攻击？
举个例子：攻击者在自己的钓鱼网站上，引导用户去跳转其他已登陆的网站，以此获得一些用户信息
如何防御：
  （1）Get 请求不对数据进行修改
  （2）不允许第三方网站访问到用户 Cookie
  （3）阻止第三方网站请求接口
  （4）请求时附带验证信息，比如验证码或者 Token
SameSite：cookie可以设置SameSite属性，该属性表示 Cookie 不随着跨域请求发送。
验证 Referer：判断该请求是否为第三方网站发起的。
Token：服务器下发一个随机 Token，每次发起请求时将 Token 携带上，服务器验证 Token 是否有效。 

3、CSP
CSP 本质上就是建立白名单，开发者明确告诉浏览器哪些外部资源可以加载和执行。我们只需要配置规则，如何拦截是由浏览器自己实现的。我们可以通过这种方式来尽量减少 XSS 攻击。
通常可以通过两种方式来开启 CSP：
设置 HTTP Header 中的 Content-Security-Policy
设置 meta 标签的方式 <meta http-equiv="Content-Security-Policy">


4、点击劫持
举个例子：攻击者通过iframe嵌入自己的页面，并将iframe设置为透明，在页面中透出一个按钮诱导用户点击。
防御：
（1）X-FRAME-OPTIONS 是一个 HTTP 响应头，可以防御用iframe 嵌套的点击劫持攻击。
DENY，表示页面不允许通过 iframe 的方式展示
SAMEORIGIN，表示页面可以在相同域名下通过 iframe 的方式展示
ALLOW-FROM，表示页面可以在指定来源的 iframe 中展示
（2）js
<head>
  <style id="click-jack">
    html {
      display: none !important;
    }
  </style>
</head>
<body>
  <script>
    if (self == top) {
      var style = document.getElementById('click-jack')
      document.body.removeChild(style)
    } else {
      top.location = self.location
    }
  </script>
</body>