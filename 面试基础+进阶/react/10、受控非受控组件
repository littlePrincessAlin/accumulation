（1）受控：例如渲染表单的react组件还控制着用户输入过程中表达发生的操作。
在使用表单的时候，像input、select绑定一个change事件，当用户输入的时候，会触发onChange事件，更新组件的state，这种组件被称为受控组件；
受控组件更新state过程：
*初始state设置表单默认值
*当表单值变化时调用onChange事件
*事件处理器通过事件对象e拿到改变后的状态，更新state；
*setState会触发视图渲染，完成表单组件更新


（2）非受控：react赋予组件一个初始值，并且不去控制后续的更新。
如果一个表单组件没有value props（单选和复选按钮对应的是checked props）时，就可以称为非受控组件。在非受控组件中，可以使用一个ref来从DOM获得表单值。而不是为每个状态更新编写一个事件处理程序。
（当需要表单值的时候用ref来从DOM获得表单值。）


（1）有状态组件
特点：
内部使用state维护自身状态变化，有状态组件根据外部组件传入的props和自身state进行渲染。
使用较多，容易频繁触发生命周期钩子函数，影响性能
可以使用react的生命周期
是一个类组件 o 有继承 o 可以使用this


使用场景
需要使用到状态的



（2）无状态组件
特点：
不依赖自身的状态state
可以是类组件或者函数组件。
可以完全避免使用 this 关键字。（由于使用的是箭头函数事件无需绑定）
有更高的性能。当不需要使用生命周期钩子时，应该首先使用无状态函数组件
组件内部不维护 state ，只根据外部组件传入的 props 进行渲染的组件，当 props 改变时，组件重新渲染。

使用场景：组件不需要管理 state，纯展示

优点：
简化代码、专注于 render
组件不需要被实例化，无生命周期，提升性能。 输出（渲染）只取决于输入（属性），无副作用
视图和数据的解耦分离

缺点：
无法使用 ref 无生命周期方法
无法控制组件的重渲染，因为无法使用shouldComponentUpdate 方法，当组件接受到新的属性时则会重渲染


