react在渲染的时候，会递归去对比虚拟dom树，找出需要变动的节点，然后同步更新它们，一气呵成。
这个过程react会占用浏览器资源，这会导致用户触发的事件得不到响应，并且会导致掉帧。导致用户感觉卡顿。

为了给用户制造应用很快的假象，不能让一个任务长期霸占资源。
可以将浏览器的渲染、布局、绘制、资源加载(例如 HTML 解析)、事件响应、脚本执行视作操作系统的“进程”，需要通过某些调度策略合理地分配 CPU 资源，从而提高浏览器的用户响应速率, 同时兼顾任务执行效率。

所以react-fiber架构，可以让这个执行过程可被中断，适时的让出cpu执行权，除了可以让浏览器及时响应用户交互，还有如下优点：
1、分批延时对dom进行操作，避免一次性操作大量dom，可以得到更好的用户体验。
2、给浏览器一些喘息的机会，会对代码进行编译优化及进行热代码优化，或对reflow进行修正；
3、核心思想：fiber也成协程。它的线程并不一样，协程本身是没要兵法或者并行能力的，它只是一种控制流程的让出机制。让出cpu的执行权，让cpu能在这段时间执行其他操作。
渲染过程可以被中断，可以将控制权交回给浏览器，让位给高优的任务，浏览器空闲的时候再恢复渲染。
