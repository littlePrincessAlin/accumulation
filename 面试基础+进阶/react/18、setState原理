1、原理
（1）首先调用setState入口函数，根据入参不同，将它们分发到不同的功能函数中
（2）enqueueSetState方法，是把新的state放进组件的状态队列里，并且调用enqueueUpdate来处理将要更新的实例对象
（3）enqueueUpdate方法的batchingStrategy这个对象中isBatchingUpdates属性决定是否要走更新流程，还是应该排队等待；如果轮到执行，就调用batchedUpdates发起更新流程；

2、setState调用之后发生了什么？
在代码中调用setState函数之后，React 会将传入的参数对象与组件当前的状态合并，然后触发所谓的调和过程(Reconciliation)。

经过调和过程，React 会以相对高效的方式根据新的状态构建 React 元素树并且着手重新渲染整个UI界面。
在 React 得到元素树之后，React 会自动计算出新的树与老树的节点差异，然后根据差异对界面进行最小化重渲染。在差异计算算法中，React 能够相对精确地知道哪些位置发生了改变以及应该如何改变，这就保证了按需更新，而不是全部重新渲染。

如果在短时间内频繁setState。React会将state的改变压入栈中，在合适的时机，批量更新state和视图，达到提高性能的效果。

3、setState是同步还是异步的
setState 并不是单纯同步/异步的，它的表现会因调用场景的不同而不同。通过 isBatchingUpdates 来判断setState 是先存进 state 队列还是直接更新，如果值为 true 则执行异步操作，为 false 则直接更新。

如果是单纯的同步，那么每一次setState都会重新vnode diff + dom修改，这对性能十分不友好。
如果异步，就可以把多个setState合成一次组件更新。

异步：react生命周期和合成事件
同步：react无法控制的地方，比如原生事件， addEventListener 、setTimeout、setInterval

4、React中setState的第二个参数作用是什么？
是一个回调函数。可以拿到最新的你更改后的state，等价于componentDidUpdate

5、setState和replaceState的区别是什么？
setState 是修改其中的部分状态，相当于 Object.assign，只是覆盖，不会减少原来的状态。而replaceState 是完全替换原来的状态，相当于赋值，将原来的 state 替换为另一个对象，如果新状态属性减少，那么 state 中就没有这个状态了。

6、state和props区别
（1）props
props是一个从外部传进组件的参数，主要作为就是从父组件向子组件传递数据，它具有可读性和不变性，只能通过外部组件主动传入新的props来重新渲染子组件，否则子组件的props以及展现形式不会改变。
（2）state
state的主要作用是用于组件保存、控制以及修改自己的状态，它只能在constructor中初始化，它算是组件的私有属性，不可通过外部访问和修改，只能通过组件内部的this.setState来修改，修改state属性会导致组件的重新渲染。
（3）区别

props 是传递给组件的（类似于函数的形参），而state 是在组件内被组件自己管理的（类似于在一个函数内声明的变量）。
props 是不可修改的，所有 React 组件都必须像纯函数一样保护它们的 props 不被更改。
state 是在组件中创建的，一般在 constructor中初始化 state。state 是多变的、可以修改，每次setState都异步更新的。

7、props为什么是只读的？
this.props是组件之间沟通的一个接口，原则上来讲，它只能从父组件流向子组件

8、组件的props改变时更新组件的有哪些方法？
（1）componentWillReceiveProps（已废弃）
（2）getDerivedStateFromProps（16.3引入）


9、state 是怎么注入到组件的，从 reducer 到组件经历了什么样的过程
与redux有关系，我们放到后面说